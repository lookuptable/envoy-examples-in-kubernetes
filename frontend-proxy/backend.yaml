apiVersion: v1
kind: Namespace
metadata:
  name: backend-ns

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: backend-python-service
  namespace: backend-ns
data:
  service.py: |-
    from flask import Flask
    import socket
    import os

    app = Flask(__name__)


    @app.route('/service/<service_number>')
    def hello(service_number):
      return ('Hello from behind Envoy (service {})! hostname: {} resolved'
              'hostname: {}\n'.format(os.environ.get('SERVICE_NAME', 'sample service'),
              socket.gethostname(),
              socket.gethostbyname(socket.gethostname())))

    if __name__ == "__main__":
      app.run(host='127.0.0.1', port=8080, debug=True)

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: start-script
  namespace: backend-ns
data:
  run.sh: |-
    apt-get update && apt-get -q install -y curl python-pip
    pip install -q Flask
    python /service/service.py &
    envoy -c /etc/envoy/envoy.json

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: backend-envoy-config
  namespace: backend-ns
data:
  envoy.json: |-
    {
      "listeners": [
        {
          "address": "tcp://0.0.0.0:3443",
          "filters": [
            {
              "type": "read",
              "name": "http_connection_manager",
              "config": {
                "codec_type": "auto",
                "stat_prefix": "ingress_http",
                "route_config": {
                  "virtual_hosts": [
                    {
                      "name": "service",
                      "domains": ["*"],
                      "routes": [
                        {
                          "timeout_ms": 0,
                          "prefix": "/service",
                          "cluster": "local_service"
                        }
                      ]
                    }
                  ]
                },
                "filters": [
                  {
                    "type": "decoder",
                    "name": "router",
                    "config": {}
                  }
                ]
              }
            }
          ]
        }
      ],
      "admin": {
        "access_log_path": "/dev/null",
        "address": "tcp://0.0.0.0:8001"
      },
      "cluster_manager": {
        "clusters": [
          {
            "name": "local_service",
            "connect_timeout_ms": 250,
            "type": "strict_dns",
            "lb_type": "round_robin",
            "hosts": [
              {
                "url": "tcp://127.0.0.1:8080"
              }
            ]
          }
        ]
      }
    }

---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: envoy-backend1
  namespace: backend-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: envoy-backend1
    spec:
      containers:
      - name: envoy-backend
        image: lyft/envoy:latest
        command:
        - "/bin/bash"
        - "/scripts/run.sh"
        ports:
        - containerPort: 3443
        volumeMounts:
        - name: config-map-service
          mountPath: /service/
        - name: script-run
          mountPath: /scripts/
        - name: backend-envoy-config
          mountPath: /etc/envoy/
      volumes:
      - name: config-map-service
        configMap:
          name: backend-python-service
      - name: script-run
        configMap:
          name: start-script
      - name: backend-envoy-config
        configMap:
          name: backend-envoy-config

---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: envoy-backend2
  namespace: backend-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: envoy-backend2
    spec:
      containers:
      - name: envoy-backend
        image: lyft/envoy:latest
        command:
        - "/bin/bash"
        - "/scripts/run.sh"
        ports:
        - containerPort: 3443
        volumeMounts:
        - name: config-map-service
          mountPath: /service/
        - name: script-run
          mountPath: /scripts/
        - name: backend-envoy-config
          mountPath: /etc/envoy/
      volumes:
      - name: config-map-service
        configMap:
          name: backend-python-service
      - name: script-run
        configMap:
          name: start-script
      - name: backend-envoy-config
        configMap:
          name: backend-envoy-config

---
kind: Service
apiVersion: v1
metadata:
  name: service1
  namespace: backend-ns
spec:
  selector:
    app: envoy-backend1
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3443

---
kind: Service
apiVersion: v1
metadata:
  name: service2
  namespace: backend-ns
spec:
  selector:
    app: envoy-backend2
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3443
